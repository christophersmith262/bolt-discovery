doctype html
html(lang='en')
  head
    block title
      title= name + ' Documentation'

    block styles
      // Override this block to use your own stylesheet
      style
        include documentation.css

    block scripts
      script(src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js")

  body
    #docs
      #intro
        block intro
          h1= name + ' Documentation'

      mixin navItemForModel(modelInfo, typeName)
        li
          a(href=`#resources-${typeName}`)= modelInfo.name.model
          if modelInfo.childTypes.length > 0
            ul
              each subType in modelInfo.childTypes
                li: a(href=`#resources-${subType}`)= resourcesMap[subType].name.model

      mixin resource-doc-name-and-desc(modelInfo, type)
        h3(class=(modelInfo.description ? "with-p" : ""))= modelInfo.name.model
        if modelInfo.description
          p= modelInfo.description

      mixin resource-doc-extends-info(modelInfo, type)
        if modelInfo.parentType
          p.
            <code>#{modelInfo.name.model}</code> resources extend <a href="#resources-#{modelInfo.parentType}">
            <code>#{resourcesMap[modelInfo.parentType].name.model}</code></a> resources, meaning they have
            all the same fields and requirements. The fields shown below are only the <em>additional</em>
            fields that <code>#{modelInfo.name.model}</code> resources have but
            <code>#{resourcesMap[modelInfo.parentType].name.model}</code> resources don&rsquo;t.

      mixin resource-doc-example(modelInfo, type)
        if modelInfo.example
          .conditional-section
            .toggle Show example representation
            .contents
              code
                pre= modelInfo.example

      mixin resource-doc(modelInfo, type)
        section(id="resources-"+type)
          +resource-doc-name-and-desc(modelInfo, type)
          +resource-doc-extends-info(modelInfo, type)
          +resource-doc-example(modelInfo, type)

          h4 Endpoint
          block call
            code= `/${type}`
            p

          //allow subtemplates to stick in sections before the fields.
          block fieldsPrepend

          if modelInfo.fields
            h4 Fields
            table
              thead: tr
                  th Field Name
                  th Type
                  th Description

              //move id to the top for display
              - var idIndex = -1;
              - var orderedFields = modelInfo.fields.slice();
              each field, index in modelInfo.fields
                if field.name === "id"
                  - idIndex = index;
                  - break;

              if idIndex !== -1
                - idFieldArray = orderedFields.splice(idIndex, 1)
                - orderedFields = idFieldArray.concat(orderedFields)

              each field in orderedFields
                - var fieldId = `resources-${type}-${field.name}`
                - var parentFields = modelInfo.parentType && resourcesMap[modelInfo.parentType].fields
                - var isThisField = function(it) { return it.name === field.name; }

                if !modelInfo.parentType || !(parentFields && parentFields.some(isThisField))
                  tr
                    td
                      if field.validation.required
                        b(id=fieldId)= field.name
                      else
                        span(id=fieldId)= field.name
                    td= field.kind ? field.kind.toString() : "Unknown"
                    td
                      != field.description
                      if (field.default != null && path != 'id') || field.validation.oneOf || field.validation.maxlength
                        dl
                          if field.validation.oneOf != null
                            dt Allowed Values
                            dd= field.validation.oneOf.join(', ')
                          if field.default != null && path != 'id'
                            dt Default Value
                            dd= field.default === "__AUTO__" ? "(auto generated)" : field.default
                          if field.validation.maxlength
                            dt Maximum Length
                            dd= field.validation.maxlength

            //allow subtemplates to add content after the fields
            block fieldsAppend

      section#overview
        block overview
          h2.with-p Usage Overview
          p.
            This API is compliant with the <a href="http://jsonapi.org/">JSON API</a> specification, which
            defines conventions for listing, reading, creating, updating, and deleting resources. When fetching
            a resource or resources, the spec also offers conventions for: <a href="http://jsonapi.org/format/#fetching-sorting">
            sorting the returned resources</a>, <a href="http://jsonapi.org/format/#fetching-sparse-fieldsets">
            limiting the fields returned in each resource</a>, <a href="http://jsonapi.org/format/#fetching-includes">
            including related resources</a> to form <a href="http://jsonapi.org/format/#document-structure-compound-documents">
            compound documents</a>, etc. Accordingly, these features of the #{name} aren&rsquo;t redocumented here;
            simply see the JSON API <a href="http://jsonapi.org/format">spec</a> to learn how to use them.

      block resource-descriptions
        section#resources
          h2 Resource Types
          each modelInfo, type in resourcesMap
            //find the root nodes
            if !modelInfo.parentType
              +resource-doc(modelInfo, type)
              each subType in modelInfo.childTypes
                +resource-doc(resourcesMap[subType], subType)

      section#footer
        block footer

    block nav
      nav
        ul
          block nav-intro
            li: a(href="#intro") Introduction
            li: a(href="#overview") Usage Overview

          block nav-resource-types
            li
              h3.h4 Resource Types
              ul
                each modelInfo, type in resourcesMap
                  if !modelInfo.parentType
                    +navItemForModel(modelInfo, type)

